let
  // -----------------------------
  // Função para extrair e-mails
  // -----------------------------
  ExtractEmails = (t as nullable text) as list =>
  let
    txt     = if t = null then "" else t,
    tLower  = Text.Lower(txt),
    key     = "email: ",
    keyLen  = Text.Length(key),
    lenTxt  = Text.Length(txt),

    // Localiza a próxima ocorrência começando em 'start'
    findNext = (start as number) as record =>
      let
        sliceLower = if start < lenTxt then Text.Range(tLower, start, lenTxt - start) else "",
        posRel     = Text.PositionOf(sliceLower, key, Occurrence.First),     // posição relativa no slice
        found      = posRel <> -1,
        posAbs     = if found then start + posRel else -1,                   // posição absoluta no texto
        s          = if found then posAbs + keyLen else -1,

        sliceAfter = if found and s < lenTxt then Text.Range(txt, s, lenTxt - s) else "",
        semiRel    = if found then Text.PositionOf(sliceAfter, ";", Occurrence.First) else -1,
        e          = if found then (if semiRel <> -1 then s + semiRel else lenTxt) else -1,

        value      = if found then Text.Trim(Text.Range(txt, s, e - s)) else null
      in
        [found = found, start = s, end = e, value = value],

    // Loop recursivo para coletar todos os e-mails
    loop = (start as number, acc as list) as list =>
      let
        f = findNext(start)
      in
        if not f[found] then
          acc
        else
          @loop(f[end] + 1, acc & { f[value] }),

    result = loop(0, {})
  in
    result,

  // -----------------------------
  // Fluxo + extração
  // -----------------------------
  Fonte = Folder.Files("C:\Users\cesar\Downloads\scopus_ufp"),
  #"Arquivos Ocultos Filtrados1" = Table.SelectRows(Fonte, each [Attributes]?[Hidden]? <> true),
  #"Invocar Função Personalizada1" = Table.AddColumn(#"Arquivos Ocultos Filtrados1", "Transformar Arquivo", each #"Transformar Arquivo"([Content])),
  #"Colunas Renomeadas1" = Table.RenameColumns(#"Invocar Função Personalizada1", {"Name", "Nome da Origem"}),
  #"Outras Colunas Removidas1" = Table.SelectColumns(#"Colunas Renomeadas1", {"Nome da Origem", "Transformar Arquivo"}),
  #"Coluna de Tabela Expandida1" = Table.ExpandTableColumn(#"Outras Colunas Removidas1", "Transformar Arquivo", Table.ColumnNames(#"Transformar Arquivo"(#"Arquivo de Amostra"))),
  #"Tipo Alterado" = Table.TransformColumnTypes(#"Coluna de Tabela Expandida1",{{"Nome da Origem", type text}, {"Column1", type text}, {"Column2", type text}}),
  #"Colunas Removidas" = Table.RemoveColumns(#"Tipo Alterado",{"Nome da Origem", "Column1"}),

  // Nova coluna com a LISTA de e-mails extraídos de Column2
  #"Adicionar Coluna Emails (lista)" = Table.AddColumn(#"Colunas Removidas", "EmailsLista", each ExtractEmails([Column2]), type list),

  // Expandir a lista para uma linha por e-mail
  #"Expandir Emails" = Table.ExpandListColumn(#"Adicionar Coluna Emails (lista)", "EmailsLista"),
  #"Renomear Coluna" = Table.RenameColumns(#"Expandir Emails", {{"EmailsLista", "Email"}}),
  #"Remover Linhas Vazias" = Table.SelectRows(#"Renomear Coluna", each [Email] <> null and Text.Trim([Email]) <> ""),
    #"Colunas Removidas1" = Table.RemoveColumns(#"Remover Linhas Vazias",{"Column2"}),
    #"Duplicatas Removidas" = Table.Distinct(#"Colunas Removidas1")
in
    #"Duplicatas Removidas"
